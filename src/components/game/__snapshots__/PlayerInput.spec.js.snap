exports[`PlayerInput should render the PlayerInput 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="player-input ">
    <label>
        X
    </label>
    <input
        disabled={false}
        name="playerX"
        onChange={[Function]}
        placeholder="Player name"
        type="text"
        value="" />
</div>,
  "nodes": Array [
    <div
      className="player-input ">
      <label>
            X
      </label>
      <input
            disabled={false}
            name="playerX"
            onChange={[Function]}
            placeholder="Player name"
            type="text"
            value="" />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <PlayerInput
        label="X"
        onInputChange={[Function]}
        player="playerX"
        result={
                Object {
                        "status": "waiting",
                      }
        }
        turn=""
        value="" />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": PlayerInput {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleInputChange": [Function],
        "isButtonDisabled": [Function],
        "props": Object {
          "label": "X",
          "onInputChange": [Function],
          "player": "playerX",
          "result": Object {
            "status": "waiting",
          },
          "turn": "",
          "value": "",
        },
        "refs": Object {},
        "setClass": [Function],
        "state": Object {
          "class": "",
          "disabled": false,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="player-input ">
          <label>
                    X
          </label>
          <input
                    disabled={false}
                    name="playerX"
                    onChange={[Function]}
                    placeholder="Player name"
                    type="text"
                    value="" />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="player-input ">
          <label>
                    X
          </label>
          <input
                    disabled={false}
                    name="playerX"
                    onChange={[Function]}
                    placeholder="Player name"
                    type="text"
                    value="" />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <PlayerInput
    label="X"
    onInputChange={[Function]}
    player="playerX"
    result={
        Object {
            "status": "waiting",
          }
    }
    turn=""
    value="" />,
}
`;
