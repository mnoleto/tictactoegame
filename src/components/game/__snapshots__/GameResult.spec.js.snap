exports[`<GameResult /> render the GameResult 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="game-result">
    <p>
        <span>
            The winner is 
        </span>
        <span>
            <strong>
                Player 2
            </strong>
        </span>
        <span>
            .
        </span>
    </p>
    <div
        className="buttons">
        <button
            className="new-round-button"
            onClick={[Function]}
            type="button">
            New Round
        </button>
        <button
            className="new-game-button"
            onClick={[Function]}
            type="button">
            New Game
        </button>
    </div>
</div>,
  "nodes": Array [
    <div
      className="game-result">
      <p>
            <span>
                  The winner is 
            </span>
            <span>
                  <strong>
                        Player 2
                  </strong>
            </span>
            <span>
                  .
            </span>
      </p>
      <div
            className="buttons">
            <button
                  className="new-round-button"
                  onClick={[Function]}
                  type="button">
                  New Round
            </button>
            <button
                  className="new-game-button"
                  onClick={[Function]}
                  type="button">
                  New Game
            </button>
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <GameResult
        onNewGameClick={[Function]}
        onNewRoundClick={[Function]}
        players={
                Array [
                        "Player 1",
                        "Player 2",
                      ]
        }
        result={
                Object {
                        "status": "finished",
                        "winner": "O",
                      }
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": GameResult {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "onNewGameClick": [Function],
          "onNewRoundClick": [Function],
          "players": Array [
            "Player 1",
            "Player 2",
          ],
          "result": Object {
            "status": "finished",
            "winner": "O",
          },
        },
        "refs": Object {},
        "renderMessage": [Function],
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="game-result">
          <p>
                    <span>
                              The winner is 
                    </span>
                    <span>
                              <strong>
                                        Player 2
                              </strong>
                    </span>
                    <span>
                              .
                    </span>
          </p>
          <div
                    className="buttons">
                    <button
                              className="new-round-button"
                              onClick={[Function]}
                              type="button">
                              New Round
                    </button>
                    <button
                              className="new-game-button"
                              onClick={[Function]}
                              type="button">
                              New Game
                    </button>
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="game-result">
          <p>
                    <span>
                              The winner is 
                    </span>
                    <span>
                              <strong>
                                        Player 2
                              </strong>
                    </span>
                    <span>
                              .
                    </span>
          </p>
          <div
                    className="buttons">
                    <button
                              className="new-round-button"
                              onClick={[Function]}
                              type="button">
                              New Round
                    </button>
                    <button
                              className="new-game-button"
                              onClick={[Function]}
                              type="button">
                              New Game
                    </button>
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <GameResult
    onNewGameClick={[Function]}
    onNewRoundClick={[Function]}
    players={
        Array [
            "Player 1",
            "Player 2",
          ]
    }
    result={
        Object {
            "status": "finished",
            "winner": "O",
          }
    } />,
}
`;
