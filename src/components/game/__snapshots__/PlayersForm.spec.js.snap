exports[`PlayersForm render the PlayersForm 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <form
    className="players-form">
    <legend>
        Please, inform the players name below:
    </legend>
    <div
        className="player-input active">
        <label>
            X
        </label>
        <input
            disabled={false}
            type="text" />
    </div>
    <div
        className="player-input active">
        <label>
            O
        </label>
        <input
            disabled={false}
            type="text" />
    </div>
    <button
        className="start-game-button"
        onClick={[Function]}
        type="button">
        start game
    </button>
</form>,
  "nodes": Array [
    <form
      className="players-form">
      <legend>
            Please, inform the players name below:
      </legend>
      <div
            className="player-input active">
            <label>
                  X
            </label>
            <input
                  disabled={false}
                  type="text" />
      </div>
      <div
            className="player-input active">
            <label>
                  O
            </label>
            <input
                  disabled={false}
                  type="text" />
      </div>
      <button
            className="start-game-button"
            onClick={[Function]}
            type="button">
            start game
      </button>
</form>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <PlayersForm />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": PlayersForm {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "sendData": [Function],
        "state": Object {
          "playerO": "",
          "playerX": "",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <form
          className="players-form">
          <legend>
                    Please, inform the players name below:
          </legend>
          <div
                    className="player-input active">
                    <label>
                              X
                    </label>
                    <input
                              disabled={false}
                              type="text" />
          </div>
          <div
                    className="player-input active">
                    <label>
                              O
                    </label>
                    <input
                              disabled={false}
                              type="text" />
          </div>
          <button
                    className="start-game-button"
                    onClick={[Function]}
                    type="button">
                    start game
          </button>
</form>,
        "_debugID": 2,
        "_renderedOutput": <form
          className="players-form">
          <legend>
                    Please, inform the players name below:
          </legend>
          <div
                    className="player-input active">
                    <label>
                              X
                    </label>
                    <input
                              disabled={false}
                              type="text" />
          </div>
          <div
                    className="player-input active">
                    <label>
                              O
                    </label>
                    <input
                              disabled={false}
                              type="text" />
          </div>
          <button
                    className="start-game-button"
                    onClick={[Function]}
                    type="button">
                    start game
          </button>
</form>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <PlayersForm />,
}
`;
