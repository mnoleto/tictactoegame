/* istanbul ignore next */'use strict';var /* istanbul ignore next */_reduxSagaTesting = require('redux-saga-testing'); /* istanbul ignore next */var _reduxSagaTesting2 = _interopRequireDefault(_reduxSagaTesting);
var /* istanbul ignore next */_effects = require('redux-saga/effects');
var /* istanbul ignore next */_players = require('../actions/players'); /* istanbul ignore next */var _players2 = _interopRequireDefault(_players);
var /* istanbul ignore next */_sagas = require('../sagas');
var /* istanbul ignore next */_Game = require('../services/Game'); /* istanbul ignore next */var _Game2 = _interopRequireDefault(_Game);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var Api = new /* istanbul ignore next */_Game2.default();
var fetchPlayersMock = function fetchPlayersMock() /* istanbul ignore next */{return ['Player 1', 'Player 2'];};

describe('fetchPlayers', function () {
  describe('should fetch empty players', function () {
    var it = /* istanbul ignore next */(0, _reduxSagaTesting2.default)( /* istanbul ignore next */(0, _sagas.fetchPlayers)());

    it('should have called the mock API and return empty result', function (result) {
      expect(result).toEqual( /* istanbul ignore next */(0, _effects.apply)(Api, Api.fetchPlayers));
      return []; // specify what the API should have returned. 
    });

    it('and then call the success action with the data returned by the API', function (result) {
      expect(result).toEqual( /* istanbul ignore next */(0, _effects.put)( /* istanbul ignore next */_players2.default.fetchPlayersSuccess([])));
    });

    it('and then do nothing', function (result) {
      expect(result).toBeUndefined();
    });
  });

  describe('should fetch a players array', function () {
    var it = /* istanbul ignore next */(0, _reduxSagaTesting2.default)( /* istanbul ignore next */(0, _sagas.fetchPlayers)());

    it('should have called the mock API and return an array of players', function (result) {
      expect(result).toEqual( /* istanbul ignore next */(0, _effects.apply)(Api, Api.fetchPlayers));
      return ['Player 1', 'Player 2']; // specify what the API should have returned. 
    });

    it('and then call the success action with the data returned by the API', function (result) {
      expect(result).toEqual( /* istanbul ignore next */(0, _effects.put)( /* istanbul ignore next */_players2.default.fetchPlayersSuccess(['Player 1', 'Player 2'])));
    });

    it('and then do nothing', function (result) {
      expect(result).toBeUndefined();
    });
  });
});