/* istanbul ignore next */'use strict';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_sinon = require('sinon'); /* istanbul ignore next */var _sinon2 = _interopRequireDefault(_sinon);
var /* istanbul ignore next */_GameResult = require('./GameResult'); /* istanbul ignore next */var _GameResult2 = _interopRequireDefault(_GameResult);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// GameResult is responsible for render the game grid
describe('GameResult', function () {
  var props = /* istanbul ignore next */void 0,mountedGameResult = /* istanbul ignore next */void 0;
  var gameResult = function gameResult() {
    if (!mountedGameResult) {
      mountedGameResult = /* istanbul ignore next */(0, _enzyme.mount)(
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_GameResult2.default, props));

    }
    return mountedGameResult;
  };

  beforeEach(function () {
    props = {
      onNewGameClick: jest.fn(),
      onNewRoundClick: jest.fn(),
      players: ['Player 1', 'Player 2'],
      result: { status: 'finished' } };

    mountedGameResult = undefined;
  });

  it('render the GameResult', function () {
    var gameResultWrapper = /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_GameResult2.default, props));
    expect(gameResultWrapper).toMatchSnapshot();
  });

  it('div contains everything else that gets rendered', function () {
    var gameResultElement = gameResult().find('div');
    var wrappingDiv = gameResultElement.first();
    expect(wrappingDiv.hasClass('game-result')).toBeTruthy();
    expect(wrappingDiv.children()).toEqual(gameResult().children());
  });

  it('should have a p element with a message to the winner', function () {

  });

  it('should have a p element with a draw message', function () {

  });

  describe('buttons', function () {
    it('should have a button wrapper', function () {
      var buttonWrapperElement = gameResult().find('div.buttons');
      expect(buttonWrapperElement.length).toEqual(1);
    });

    it('should have two buttons', function () {
      var buttonElements = gameResult().find('button');
      expect(buttonElements.length).toEqual(2);
    });

    it('simulate new round click', function () {
      props.onNewGameClick = /* istanbul ignore next */_sinon2.default.spy();
      var buttonWrapperElement = gameResult().find('div.buttons');
      var newRoundButton = buttonWrapperElement.childAt(0);

      newRoundButton.simulate('click');
      expect(props.onNewGameClick.callCount).toEqual(1);
    });

    it('simulate new game click', function () {
      props.onNewGameClick = /* istanbul ignore next */_sinon2.default.spy();
      var buttonWrapperElement = gameResult().find('div.buttons');
      var newGameButton = buttonWrapperElement.childAt(1);

      newGameButton.simulate('click');
      expect(props.onNewGameClick.callCount).toEqual(1);
    });
  });

});