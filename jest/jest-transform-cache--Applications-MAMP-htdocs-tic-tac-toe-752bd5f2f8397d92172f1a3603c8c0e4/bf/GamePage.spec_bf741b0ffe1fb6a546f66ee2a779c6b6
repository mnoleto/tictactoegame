/* istanbul ignore next */'use strict';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_reduxMockStore = require('redux-mock-store'); /* istanbul ignore next */var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);
var /* istanbul ignore next */_reduxLogger = require('redux-logger'); /* istanbul ignore next */var _reduxLogger2 = _interopRequireDefault(_reduxLogger);
var /* istanbul ignore next */_reduxSaga = require('redux-saga'); /* istanbul ignore next */var _reduxSaga2 = _interopRequireDefault(_reduxSaga);
var /* istanbul ignore next */_sagas = require('../sagas'); /* istanbul ignore next */var _sagas2 = _interopRequireDefault(_sagas);

var /* istanbul ignore next */_reducers = require('../reducers'); /* istanbul ignore next */var _reducers2 = _interopRequireDefault(_reducers);








var /* istanbul ignore next */_GamePage = require('./GamePage'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // create the saga middleware
var sagaMiddleware = /* istanbul ignore next */(0, _reduxSaga2.default)();var middlewares = [/* istanbul ignore next */_reduxLogger2.default, sagaMiddleware];
// Use the same middlewares you use with Redux's applyMiddleware
var mockStore = /* istanbul ignore next */(0, _reduxMockStore2.default)(middlewares);
// Setup the entire state, not just the part Redux passes to the connected component.
var mockStoreInitialized = mockStore({
  allPlayers: {},
  game: {},
  routing: {} });


// then run the saga
sagaMiddleware.run( /* istanbul ignore next */_sagas2.default);

// GamePage is responsible for render the game grid
describe('<GamePage />', function () {
  var props = /* istanbul ignore next */void 0,connectedGamePage = /* istanbul ignore next */void 0,mountedGamePage = /* istanbul ignore next */void 0;
  var conectedGamePage = function conectedGamePage() {
    if (!connectedGamePage) {
      connectedGamePage = /* istanbul ignore next */(0, _enzyme.mount)(
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRedux.Provider, /* istanbul ignore next */{ store: store },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_GamePage.GamePage, props)));


    }
    return connectedGamePage;
  };

  var gamePage = function gamePage() {
    if (!mountedGamePage) {
      mountedGamePage = /* istanbul ignore next */(0, _enzyme.mount)(
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_GamePage.GamePage, props));

    }
    return mountedGamePage;
  };

  beforeEach(function () {
    props = {
      allPlayers: [],
      game: {
        board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'],
        players: [],
        result: { status: 'waiting' },
        turn: '' },

      gameActions: {
        newGame: jest.fn(),
        newRound: jest.fn(),
        registerMove: jest.fn(),
        resetGame: jest.fn(),
        sendPlayersName: jest.fn() },

      playersActions: {
        fetchPlayers: jest.fn() } };


    connectedGamePage = undefined;
    mountedGamePage = undefined;
  });


  describe('Connected test', function () {

  });

  describe('Unconnected test', function () {
    it('render the GamePage component', function () {
      var gamePageWrapper = /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_GamePage.GamePage, props));
      expect(gamePageWrapper).toMatchSnapshot();
    });

    it('render a div as root element', function () {
      var gamePageElement = gamePage().find('div');
      var wrappingDiv = gamePageElement.first();
      expect(wrappingDiv.children()).toEqual(gamePage().children());
    });

    it('should wrapper has the class game-page', function () {
      var gamePageElement = gamePage().find('div');
      var wrappingDiv = gamePageElement.first();
      expect(wrappingDiv.hasClass('game-page')).toBeTruthy();
    });

    describe('render content', function () {
      it('should render the players form if status is not equal finished or draw', function () {
        // let gamePageRenderer= gamePage();
        // gamePageRenderer.setProps({game: {
        //   board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', ],
        //   players: [],
        //   result: {status: 'running'},
        //   turn: ''
        // }});
        // let playersForm = gamePageRenderer.find('div.players-form');
        // expect(playersForm.length).toEqual(1);
      });

      it('should render the game board if status is not equal finished or draw and equal to running', function () {

      });

      it('should render the game result if status is equal finished or draw', function () {

      });
    });

    describe('render leaderboard', function () {
      it('should not render the leaderboard if allPlayers length is equal 0', function () {

      });

      it('should render the leaderboard if allPlayers length is higher than 0', function () {

      });
    });
  });
});