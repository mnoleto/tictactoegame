/* istanbul ignore next */'use strict';var /* istanbul ignore next */_reduxSagaTesting = require('redux-saga-testing'); /* istanbul ignore next */var _reduxSagaTesting2 = _interopRequireDefault(_reduxSagaTesting);
var /* istanbul ignore next */_effects = require('redux-saga/effects');
var /* istanbul ignore next */_Game = require('../services/Game'); /* istanbul ignore next */var _Game2 = _interopRequireDefault(_Game);
var /* istanbul ignore next */_game = require('../actions/game'); /* istanbul ignore next */var _game2 = _interopRequireDefault(_game);
var /* istanbul ignore next */_sagas = require('../sagas'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var Api = new /* istanbul ignore next */_Game2.default();

describe('gameSaga', function () {
  it('should fetch players', function () {
    var it = /* istanbul ignore next */(0, _reduxSagaTesting2.default)( /* istanbul ignore next */(0, _sagas.fetchPlayers)());

    it('should have called the API first, which will return some data an empty array', function (result) {
      expect(result).toEqual( /* istanbul ignore next */(0, _effects.apply)(Api, Api.fetchPlayers));
      return [];
    });

    it('and then call the success action with the data returned by the API', function (result) {
      expect(result).toEqual( /* istanbul ignore next */(0, _effects.put)( /* istanbul ignore next */_game2.default.fetchPlayersSuccess([])));
    });

    it('and then do nothing', function (result) {
      expect(result).toBeUndefined();
    });
  });
});