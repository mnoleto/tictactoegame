/* istanbul ignore next */'use strict';var /* istanbul ignore next */_Player = require('./Player'); /* istanbul ignore next */var _Player2 = _interopRequireDefault(_Player);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// Player class is responble for control the players
// CONTRACT
// 1. Should have a initial state
// 2. Should add a player by name
//    Should add only strings as name
//    Should insert a player with 0 wins, 0 defeats and 0 draws at first
// 3. Should set the game result for a player and increase wins or defeats or draws
// 4. Should get the players object

describe('Player', function () {
  var PlayerApi = /* istanbul ignore next */void 0;
  var INITIAL_STATE = { name: '', wins: 0, defeats: 0, draws: 0 };

  beforeEach(function () {
    PlayerApi = new /* istanbul ignore next */_Player2.default('John');
  });

  it('Api exist', function () {
    expect(PlayerApi).toBeDefined();
  });

  it('constructor', function () {
    expect(PlayerApi.INITIAL_STATE).toEqual(INITIAL_STATE);
    expect(PlayerApi._player).toEqual({ "defeats": 0, "draws": 0, "name": "John", "wins": 0 });
  });

  // GETS AND SETTERS
  it('get and set name', function () {
    PlayerApi.name = 'Player';
    expect(PlayerApi.name).toEqual('Player');

    PlayerApi.name = 'Second Player';
    expect(PlayerApi.name).toEqual('Second Player');
  });

  it('get and set player', function () {
    PlayerApi.player = { wins: 3 };
    expect(PlayerApi.player).toEqual(name, wins, defeats, draws);

    // PlayerApi.player = 'Second Player';
    // expect(PlayerApi.player).toEqual('Second Player');
  });

  it('add', function () {
    expect(PlayerApi.add).toBeDefined();

    PlayerApi.add('Mark');
    expect(PlayerApi._player).toEqual({ "defeats": 0, "draws": 0, "name": "Mark", "wins": 0 });

    PlayerApi.add(3);
    expect(PlayerApi._player).toEqual({ "defeats": 0, "draws": 0, "name": "3", "wins": 0 });
  });

  it('should insert a player with 0 wins, 0 defeats and 0 draws', function () {
    expect(PlayerApi._player.wins).toEqual(0);
    expect(PlayerApi._player.defeats).toEqual(0);
    expect(PlayerApi._player.draws).toEqual(0);

    PlayerApi.add('Player 2');
    expect(PlayerApi._player.wins).toEqual(0);
    expect(PlayerApi._player.defeats).toEqual(0);
    expect(PlayerApi._player.draws).toEqual(0);
  });

  it('increaseScore', function () {
    expect(PlayerApi.increaseScore).toBeDefined();

    PlayerApi.increaseScore('wins');
    expect(PlayerApi._player.wins).toEqual(1);
    expect(PlayerApi._player.defeats).toEqual(0);
    expect(PlayerApi._player.draws).toEqual(0);

    PlayerApi.increaseScore('wins');
    expect(PlayerApi._player.wins).toEqual(2);
    expect(PlayerApi._player.defeats).toEqual(0);
    expect(PlayerApi._player.draws).toEqual(0);

    PlayerApi.increaseScore('defeats');
    expect(PlayerApi._player.wins).toEqual(2);
    expect(PlayerApi._player.defeats).toEqual(1);
    expect(PlayerApi._player.draws).toEqual(0);

    PlayerApi.increaseScore('draws');
    expect(PlayerApi._player.wins).toEqual(2);
    expect(PlayerApi._player.defeats).toEqual(1);
    expect(PlayerApi._player.draws).toEqual(1);
  });
});