/* istanbul ignore next */'use strict';var /* istanbul ignore next */_Game = require('./Game'); /* istanbul ignore next */var _Game2 = _interopRequireDefault(_Game);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// Game class is responsible for control the game
// CONTRACTS
// 1. Should have a initial state
// 2. Should start the game
//    Should change the game status
//    Should create the board with empty spaces
//    Should set the first player turn
// 3. Should allow to register moves
//    Should register moves only to existing cells
//    Should register moves only to empty cells
//    Should save the players moves on the board
//    Should check if the game is finished
//    Should increment the move counter
//    Should return the result
// 3.1. If is finished
//      Should test the rows for a winner
//      Should test the cols for a winner
//      Should test the diagonal for a winner
//      Should set the winner and loser names or return if is a draw
//      Should change the game result
// 3.2. If is not finished
//      Should increase the move counter
//      Should alternate the players turns
// 4. Should check if the game
//    Should only check if is finished after 5 moves
//    Should set the result - who is the winner and loser or return if is a draw
// 5. Should reset the game

describe('Game', function () {
  var GameApi = /* istanbul ignore next */void 0;

  beforeEach(function () {
    GameApi = new /* istanbul ignore next */_Game2.default();
  });

  it('Api exist', function () {
    expect(GameApi).toBeDefined();
  });

  it('constructor', function () {
    expect(GameApi.board).toEqual([]);
    expect(GameApi.grid).toEqual(3);
    expect(GameApi.movesCounter).toEqual(0);
    expect(GameApi.result).toEqual({});
    expect(GameApi.status).toEqual('waiting');
    expect(GameApi.turn).toEqual('');
  });

  it('startGame', function () {
    expect(GameApi.startGame).toBeDefined();

    GameApi.startGame();
    expect(GameApi.status).toEqual('running');
    expect(GameApi.board).toEqual(['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']);
    expect(GameApi.turn).toEqual('X');
  });

  it('changeGameStatus', function () {
    expect(GameApi.changeGameStatus).toBeDefined();

    GameApi.changeGameStatus('running');
    expect(GameApi.status).toEqual('running');

    GameApi.changeGameStatus('finished');
    expect(GameApi.status).toEqual('finished');
  });

  it('emptyBoard', function () {
    expect(GameApi.emptyBoard).toBeDefined();
    GameApi.emptyBoard();
    expect(GameApi.board).toEqual(['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']);
  });

  it('setTurn', function () {
    expect(GameApi.setTurn).toBeDefined();

    GameApi.setTurn('X');
    expect(GameApi.turn).toEqual('X');

    GameApi.setTurn('O');
    expect(GameApi.turn).toEqual('O');
  });

  it('isFinished', function () {
    expect(GameApi.isFinished).toBeDefined();
  });

  describe('isFinished possibilities', function () {
    beforeEach(function () {
      GameApi.startGame();
    });

    it('finish the row game after 5 moves', function () {
      GameApi.registerMove('O', 0);
      GameApi.registerMove('X', 3);
      expect(GameApi.result).toEqual({ status: 'running' });

      GameApi.registerMove('O', 1);
      GameApi.registerMove('X', 8);
      expect(GameApi.result).toEqual({ status: 'running' });

      GameApi.registerMove('O', 2);
      expect(GameApi.result).toEqual({ status: 'finished', winner: 'O' });
    });

    it('finish the column game after 7 moves', function () {
      GameApi.registerMove('X', 0);
      GameApi.registerMove('O', 3);
      GameApi.registerMove('X', 1);
      GameApi.registerMove('O', 8);
      GameApi.registerMove('X', 4);
      expect(GameApi.result).toEqual({ status: 'running' });

      GameApi.registerMove('O', 7);
      GameApi.registerMove('X', 2);
      expect(GameApi.result).toEqual({ status: 'finished', winner: 'X' });
    });

    it('finish the diagonal after 9 moves', function () {
      GameApi.registerMove('X', 0);
      GameApi.registerMove('O', 6);
      GameApi.registerMove('X', 4);
      GameApi.registerMove('O', 3);
      GameApi.registerMove('X', 2);
      GameApi.registerMove('O', 1);
      GameApi.registerMove('X', 7);
      GameApi.registerMove('O', 5);
      GameApi.registerMove('X', 8);
      expect(GameApi.result).toEqual({ status: 'finished', winner: 'X' });
    });

    it('it draws after 9 moves', function () {
      GameApi.registerMove('X', 0);
      GameApi.registerMove('O', 6);
      GameApi.registerMove('X', 4);
      GameApi.registerMove('O', 3);
      GameApi.registerMove('X', 2);
      GameApi.registerMove('O', 1);
      GameApi.registerMove('X', 7);
      GameApi.registerMove('O', 8);
      GameApi.registerMove('X', 5);
      expect(GameApi.result).toEqual({ status: 'draw' });
    });
  });

  it('registerMove', function () {
    expect(GameApi.registerMove).toBeDefined();

    GameApi.startGame();

    GameApi.registerMove('X', 0);
    expect(GameApi.board[0]).toEqual('X');
    expect(GameApi.movesCounter).toEqual(1);

    GameApi.registerMove('O', 1);
    expect(GameApi.board[1]).toEqual('O');
    expect(GameApi.movesCounter).toEqual(2);

    GameApi.registerMove('O', 12);
    expect(GameApi.board[12]).toBeUndefined();
    expect(GameApi.movesCounter).toEqual(2);

    GameApi.registerMove('X', 1);
    expect(GameApi.board[1]).toEqual('O');
    expect(GameApi.movesCounter).toEqual(2);

    GameApi.registerMove('X', 3);
    expect(GameApi.registerMove('X', 6)).toEqual({ status: 'running' });
    expect(GameApi.movesCounter).toEqual(4);
    expect(GameApi.status).toEqual('running');
  });

  it('alternateTurns', function () {
    expect(GameApi.alternateTurns).toBeDefined();
    GameApi.startGame();
    expect(GameApi.turn).toEqual('X');

    GameApi.registerMove('X', 0);
    expect(GameApi.turn).toEqual('O');
  });

  it('resetGame', function () {
    expect(GameApi.resetGame).toBeDefined();
  });
});