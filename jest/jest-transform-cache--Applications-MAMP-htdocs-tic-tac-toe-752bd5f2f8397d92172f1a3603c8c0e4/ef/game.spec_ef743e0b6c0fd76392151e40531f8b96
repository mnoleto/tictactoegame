/* istanbul ignore next */'use strict';var /* istanbul ignore next */_game = require('./game'); /* istanbul ignore next */var _game2 = _interopRequireDefault(_game);
var /* istanbul ignore next */_actionTypes = require('./actionTypes'); /* istanbul ignore next */var _actionTypes2 = _interopRequireDefault(_actionTypes);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('games reducer', function () {
  it('should return the initial state', function () {
    expect( /* istanbul ignore next */(0, _game2.default)(undefined, {})).toEqual({ board: [], players: [], result: {}, turn: '' });
  });

  it('should handle the NEW_GAME', function () {
    expect( /* istanbul ignore next */(0, _game2.default)({}, { type: /* istanbul ignore next */_actionTypes2.default.NEW_GAME })).toEqual({});
  });

  it('should handle the NEW_GAME_SUCCESS', function () {
    expect( /* istanbul ignore next */(0, _game2.default)({}, {
      type: /* istanbul ignore next */_actionTypes2.default.NEW_GAME_SUCCESS,
      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'e'],
      players: ['Player 1', 'Player 2'],
      result: { status: 'running' },
      turn: 'X' })).
    toEqual({
      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'e'],
      players: ['Player 1', 'Player 2'],
      result: { status: 'running' },
      turn: 'X' });

  });

  it('should handle the NEW_ROUND', function () {
    expect( /* istanbul ignore next */(0, _game2.default)({}, { type: /* istanbul ignore next */_actionTypes2.default.NEW_ROUND })).toEqual({});
  });

  it('should handle the NEW_ROUND_SUCCESS', function () {
    expect( /* istanbul ignore next */(0, _game2.default)({}, {
      type: /* istanbul ignore next */_actionTypes2.default.NEW_ROUND_SUCCESS,
      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'e'],
      players: ['Player 1', 'Player 2'],
      result: { status: 'running' },
      turn: 'X' })).
    toEqual({
      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'e'],
      players: ['Player 1', 'Player 2'],
      result: { status: 'running' },
      turn: 'X' });

  });

  it('should handle the SEND_PLAYERS_NAME', function () {
    expect( /* istanbul ignore next */(0, _game2.default)({}, { type: /* istanbul ignore next */_actionTypes2.default.SEND_PLAYERS_NAME, playerX: 'Player 1', playerO: 'Player 2' })).toEqual({
      players: ['Player 1', 'Player 2'] });

  });

  it('should handle the SEND_PLAYERS_NAME_SUCCESS', function () {
    expect( /* istanbul ignore next */(0, _game2.default)({}, {
      type: /* istanbul ignore next */_actionTypes2.default.SEND_PLAYERS_NAME_SUCCESS,
      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'e'],
      players: ['Player 1', 'Player 2'],
      result: { status: 'running' },
      turn: 'X' })).
    toEqual({
      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'e'],
      players: ['Player 1', 'Player 2'],
      result: { status: 'running' },
      turn: 'X' });

  });

  it('should handle the REGISTER_MOVE', function () {
    expect( /* istanbul ignore next */(0, _game2.default)({}, { type: /* istanbul ignore next */_actionTypes2.default.REGISTER_MOVE })).toEqual({});
  });

  it('should handle the REGISTER_MOVE_SUCCESS', function () {
    expect( /* istanbul ignore next */(0, _game2.default)({}, {
      type: /* istanbul ignore next */_actionTypes2.default.REGISTER_MOVE_SUCCESS,
      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'e'],
      players: ['Player 1', 'Player 2'],
      result: { status: 'running' },
      turn: 'X' })).
    toEqual({
      board: ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'e'],
      players: ['Player 1', 'Player 2'],
      result: { status: 'running' },
      turn: 'X' });

  });
});