/* istanbul ignore next */'use strict';var /* istanbul ignore next */_players = require('./players'); /* istanbul ignore next */var _players2 = _interopRequireDefault(_players);
var /* istanbul ignore next */_actionTypes = require('./actionTypes'); /* istanbul ignore next */var _actionTypes2 = _interopRequireDefault(_actionTypes);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('players reducer', function () {
  it('should return the initial state', function () {
    expect( /* istanbul ignore next */(0, _players2.default)(undefined, {})).toEqual({ error: false, data: [] });
  });

  it('should handle the FETCH_PLAYERS', function () {
    expect( /* istanbul ignore next */(0, _players2.default)({}, { type: /* istanbul ignore next */_actionTypes2.default.FETCH_PLAYERS })).toEqual({ error: false });
  });

  it('should handle the FETCH_PLAYERS_SUCCESS', function () {
    expect( /* istanbul ignore next */(0, _players2.default)({}, { type: /* istanbul ignore next */_actionTypes2.default.FETCH_PLAYERS_SUCCESS, data: ['Player 1', 'Player 2'] })).toEqual({ error: false, data: ['Player 1', 'Player 2'] });
    expect( /* istanbul ignore next */(0, _players2.default)({ data: ['Player 1', 'Player 2'] }, { type: /* istanbul ignore next */_actionTypes2.default.FETCH_PLAYERS_SUCCESS, data: ['Player 3', 'Player 4'] })).toEqual({ error: false, data: ['Player 3', 'Player 4'] });
  });
});