/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_PlayerInput = require('./PlayerInput'); /* istanbul ignore next */var _PlayerInput2 = _interopRequireDefault(_PlayerInput);
/* istanbul ignore next */require('../../styles/game/PlayersForm.scss'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

/*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Class responsible for render the PlayersForm
var
PlayersForm = function (_Component) {_inherits(PlayersForm, _Component);
  function /* istanbul ignore next */PlayersForm(props) {/* istanbul ignore next */_classCallCheck(this, PlayersForm);


    // playerX and playerO state used to update the PlayerInput component
    var _this = _possibleConstructorReturn(this, (PlayersForm.__proto__ || Object.getPrototypeOf(PlayersForm)).call(this, props)); /* istanbul ignore next */_this.state = {
      playerX: '',
      playerO: '' };


    /* istanbul ignore next */_this.handleInputChange = /* istanbul ignore next */_this.handleInputChange.bind( /* istanbul ignore next */_this);
    /* istanbul ignore next */_this.renderFormFooter = /* istanbul ignore next */_this.renderFormFooter.bind( /* istanbul ignore next */_this);
    /* istanbul ignore next */_this.renderFormHeader = /* istanbul ignore next */_this.renderFormHeader.bind( /* istanbul ignore next */_this);
    /* istanbul ignore next */_this.sendData = /* istanbul ignore next */_this.sendData.bind( /* istanbul ignore next */_this); /* istanbul ignore next */return _this;
  }_createClass(PlayersForm, [{ key: 'componentWillReceiveProps', value: function componentWillReceiveProps()

    {
      // check if the players props changed before update the state
      if (this.props.players.length > 0 && this.props.players[0] !== this.state.playerX && this.props.players[1] !== this.state.playerO) {
        // update the playerX and playerO state 
        this.setState({
          playerX: this.props.players[0],
          playerO: this.props.players[1] });

      }
    }

    /*
       * Function to handle all the input changes and update the state
       * @param name [String]: name of the state to be updated
       * @param value [String]: value to update the state
       */ }, { key: 'handleInputChange', value: function handleInputChange(
    name, value) {
      this.setState( /* istanbul ignore next */_defineProperty({}, name, value));
    }

    /*
       * Function to send the players name to the parent component when the user hit the "start game button"
       */ }, { key: 'sendData', value: function sendData()
    {/* istanbul ignore next */var
      onStartGame = this.props.onStartGame;
      var playerX = this.state.playerX,
      playerO = this.state.playerO;

      onStartGame(playerX, playerO);
    }

    /*
       * Function to render the form footer
       * - Should render the player turn when the game is running ou the start game button when the game isn`t running
       */ }, { key: 'renderFormFooter', value: function renderFormFooter()
    {/* istanbul ignore next */var _props =
      this.props,result = _props.result,turn = _props.turn;
      if (result.status && result.status && result.status === 'running') {
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'turn' }, /* istanbul ignore next */'It`s ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'strong', /* istanbul ignore next */null, turn), /* istanbul ignore next */' turn.'));

      } else if (!result.status || result.status && result.status !== 'running') {
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ type: 'button', className: 'start-game-button', onClick: this.sendData }, /* istanbul ignore next */'start game'));

      }
    }

    /*
       * Function to render the form header
       * - Should render legend text when the game isn`t running
       */ }, { key: 'renderFormHeader', value: function renderFormHeader()
    {/* istanbul ignore next */var
      result = this.props.result;
      if (!result.status || result.status && result.status !== 'running') {
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */null, /* istanbul ignore next */'Please, inform the players name below:'));

      }
      return '';
    } }, { key: 'render', value: function render()

    {/* istanbul ignore next */var _props2 =
      this.props,result = _props2.result,turn = _props2.turn;

      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ className: 'players-form' },
          this.renderFormHeader(),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PlayerInput2.default, /* istanbul ignore next */{
            label: 'X',
            onInputChange: this.handleInputChange,
            player: 'playerX',
            result: result,
            turn: turn,
            value: this.state.playerX || '' }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PlayerInput2.default, /* istanbul ignore next */{
            label: 'O',
            onInputChange: this.handleInputChange,
            player: 'playerO',
            result: result,
            turn: turn,
            value: this.state.playerO || '' }),

          this.renderFormFooter()));


    } }]);return PlayersForm;}(_react.Component);


PlayersForm.propTypes = {
  onStartGame: /* istanbul ignore next */_react.PropTypes.func.isRequired,
  players: /* istanbul ignore next */_react.PropTypes.array,
  result: /* istanbul ignore next */_react.PropTypes.object.isRequired,
  turn: /* istanbul ignore next */_react.PropTypes.string }; /* istanbul ignore next */exports.default =


PlayersForm;