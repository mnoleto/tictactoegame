/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_Players = require('./Players'); /* istanbul ignore next */var _Players2 = _interopRequireDefault(_Players);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

Game = function () {
  /*
                     * constructor
                     * @param playerX [String]: player X name
                     * @param playerO [String]: player O name
                     */
  function /* istanbul ignore next */Game(playerX, playerY) {/* istanbul ignore next */_classCallCheck(this, Game);
    this.board = [];
    this.grid = 3; // default 3x3 board grid
    this.movesCounter = 0;
    this.players = {};
    this.result = { status: 'running' }; // stores the result of the game
    this.turn = '';

    this.emptyBoard();
    this.players = new /* istanbul ignore next */_Players2.default(playerX, playerY);
    this.setTurn = 'X';
  }

  /*
     * public function that advance to the next turn
     */_createClass(Game, [{ key: 'alternateTurns', value: function alternateTurns()
    {
      this.setTurn = this.turn === 'X' ? 'O' : 'X';
    }

    /*
       * public function that fill the board with empty spaces
       */ }, { key: 'emptyBoard', value: function emptyBoard()
    {
      this.board = ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'];
    }

    /*
       * public function that check if the game is finished after each move and store the result
       * @return result [Boolean]: true if the game is finished or false if is not
       */ }, { key: 'isFinished', value: function isFinished()
    {
      // after the first player third move, checks if anybody wan the game
      if (this.movesCounter >= 5) {
        var i = /* istanbul ignore next */void 0,j = /* istanbul ignore next */void 0;

        // check rows
        for (i = 0; i < 6; i = i + 3) {
          if (this.board[i] !== 'E' && this.board[i] === this.board[i + 1] && this.board[i + 1] == this.board[i + 2]) {
            this.result = {
              status: 'finished',
              winner: this.board[i] };

            return true;
          }
        }

        // check cols
        for (i = 0; i <= 2; i++) {
          if (this.board[i] !== 'E' && this.board[i] === this.board[i + 3] && this.board[i + 3] == this.board[i + 6]) {
            this.result = {
              status: 'finished',
              winner: this.board[i] };

            return true;
          }
        }

        // check diagonals
        for (i = 0, j = 4; i <= 2; i = i + 2, j = j - 2) {
          if (this.board[i] !== 'E' && this.board[i] === this.board[i + j] && this.board[i + j] == this.board[i + 2 * j]) {
            this.result = {
              status: 'finished',
              winner: this.board[i] };

            return true;
          }
        }

        if (this.movesCounter === 9) {
          this.result = {
            status: 'draw' };

          return true;
        }
      }

      // if there is not winner, the game is still running and the next player shoul move
      this.result = { status: 'running', turn: this.turn };

      return false;
    }

    /*
       * public function that start the game
       * @param letter [String]: X or O as possible letters
       * @return result [Object]: if the game is running - send the next turn; if is finished - send the winner
       */ }, { key: 'registerMove', value: function registerMove(
    position) {
      if (position < Math.pow(this.grid, 2) && this.board[position] === 'E') {
        this.board[position] = this.turn;
        this.movesCounter++;
        this.alternateTurns();
        this.isFinished();
      }
      return this.result;
    }

    /*
       * public function that reset the game to its initial state
       */ }, { key: 'resetGame', value: function resetGame()
    {
      this.board = [];
      this.movesCounter = 0;
      this.result = {};
      this.turn = '';
    }

    /*
       * public function that start the game
       * @param letter [String]: X or O as possible letters
       */ }, { key: 'setTurn', set: function set(
    letter) {
      this.turn = letter;
    } }]);return Game;}(); /* istanbul ignore next */exports.default =


Game;