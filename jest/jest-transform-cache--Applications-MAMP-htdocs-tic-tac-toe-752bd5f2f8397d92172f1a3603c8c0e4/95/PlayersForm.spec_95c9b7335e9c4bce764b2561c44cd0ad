/* istanbul ignore next */'use strict';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_PlayersForm = require('./PlayersForm'); /* istanbul ignore next */var _PlayersForm2 = _interopRequireDefault(_PlayersForm);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// PlayersForm is responsible for render the game grid
describe('PlayersForm', function () {
  var props = /* istanbul ignore next */void 0,mountedPlayersForm = /* istanbul ignore next */void 0;
  var playersForm = function playersForm() {
    if (!mountedPlayersForm) {
      mountedPlayersForm = /* istanbul ignore next */(0, _enzyme.mount)(
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PlayersForm2.default, props));

    }
    return mountedPlayersForm;
  };

  beforeEach(function () {
    props = {
      onStartGame: jest.fn(),
      players: [],
      result: { status: 'waiting' },
      turn: '' };

    mountedPlayersForm = undefined;
  });

  it('should render the PlayersForm', function () {
    var playersFormWrapper = /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PlayersForm2.default, props));
    expect(playersFormWrapper).toMatchSnapshot();
  });

  // it('should render a form as root element', () => {
  //   const playersFormElement = playersForm().find('form');
  //   let wrapping = playersFormElement.first();
  //   expect(wrapping.children()).toEqual(playersForm().children());
  // });

  describe('legend', function () {
    it('should render a legend inside the form if the result.status is not running', function () {

    });

    it('should not render a legend inside the form if the result.status is running', function () {

    });
  });

  describe('div.player-input', function () {
    it('should render two div.render-input', function () {

    });

    it('');
  });

  it('should render two label', function () {

  });

  describe('input type=text', function () {
    it('should render two input type=text', function () {

    });

    it('simulate change event', function () {

    });
  });

  describe('turn', function () {
    it('should render the div.turn inside the form if the result.status is running', function () {

    });

    it('should not render div.turn inside the form if the result.status is not running', function () {

    });
  });

  describe('start game button', function () {
    it('should render the button.start-game-button inside the form if the result.status is not running', function () {

    });

    it('should not render the button.start-game-button inside the form if the result.status is running', function () {

    });

    it('simulate click event', function () {

    });
  });
});