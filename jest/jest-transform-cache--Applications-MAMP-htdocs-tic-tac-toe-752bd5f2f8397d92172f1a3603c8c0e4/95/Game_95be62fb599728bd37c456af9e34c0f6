/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_Player = require('./Player'); /* istanbul ignore next */var _Player2 = _interopRequireDefault(_Player);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// class Game {
//   /*
//    * constructor
//    * @param playerX [String]: player X name
//    * @param playerO [String]: player O name
//    */
//   constructor(playerX, playerO) {
//     this._board = [];
//     this._grid = 3; // default 3x3 board _grid
//     this._movesCounter = 0;
//     this._players = [];
//     this._result = {status: 'running'}; // stores the result of the game
//     this._turn = '';

//     // this.emptyBoard();
//     // this.insertPlayers(playerX, playerO);
//     // this.setTurn('X');
//   }

//   /*
//    * public function that advance to the next turn
//    */
//   alternateTurns() {
//     this.setTurn(this._turn === 'X' ? 'O' : 'X');
//   }

//   /*
//    * public function that fill the board with empty spaces
//    */
//   emptyBoard() {
//     this._board = ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'];
//   }

//   /*
//    * public function that check if the player already exist
//    * @param playerName [String]: player name
//    * @returns [Boolean]: true if exist, false if not
//    */
//   existingUser(playerName) {
//     return (this._players.find((value) => {
//       return value.name === playerName;
//     })) ? true : false;
//   }

//   /*
//    * public function that returns the array of players
//    * @return players [Array]: array of registered players
//    */
//   fetchPlayers() {
//     return this._players.map((value) => value.player);
//   }

//   /*
//    * public function that generate names in sequence
//    * @return name [String]: name generated using the array of players length
//    */
//   generateName() {
//     return ('Player ' + (this._players.length + 1));
//   }

//   /*
//    * public function that check if the game is finished after each move and store the result
//    * @return result [Boolean]: true if the game is finished or false if is not
//    */
//   isFinished() {
//     // after the first player third move, checks if anybody wan the game
//     if(this._movesCounter >= 5) {
//       let i, j;

//       // check rows
//       for(i = 0; i < 6; i = i + 3) {
//         if(this._board[i] !== 'E' && this._board[i] === this._board[i + 1] && this._board[i + 1] == this._board[i + 2]) {
//           this._result = {
//             status: 'finished',
//             winner: this._board[i]
//           };
//           return true;
//         }
//       }

//       // check cols
//       for(i = 0; i <= 2; i ++) {
//         if(this._board[i] !== 'E' && this._board[i] === this._board[i + 3] && this._board[i + 3] == this._board[i + 6]) {
//           this._result = {
//             status: 'finished',
//             winner: this._board[i]
//           };
//           return true;
//         }
//       }

//       // check diagonals
//       for(i = 0, j = 4; i <= 2; i = i + 2, j = j - 2) {
//         if(this._board[i] !== 'E' && this._board[i] === this._board[i + j] && this._board[i + j] == this._board[i + 2*j]) {
//           this._result = {
//             status: 'finished',
//             winner: this._board[i]
//           };
//           return true;
//         }
//       }

//       if(this._movesCounter === 9) {
//         this._result = {
//           status: 'draw'
//         };
//         return true;
//       }
//     }

//     // if there is not winner, the game is still running and the next player shoul move
//     this._result = {status: 'running', turn: this._turn};

//     return false;
//   }

//   /*
//    * public function that insert two players to the players array
//    * @param playerX [String]: player X name
//    * @param playerO [String]: player O name
//    */
//   insertPlayers(playerX, playerO) {
//     let nameX = '',
//       nameO = '';
//     if(!playerX || playerX === '' || !this.existingUser(playerX)) {
//       nameX = (playerX === '' || !playerX) ? this.generateName() : playerX;
//       this._players.push(new Player(nameX));
//     }

//     if(!playerO || playerO === '' || !this.existingUser(playerO)) {
//       nameO = (playerO === '' || !playerO) ? this.generateName() : playerO;
//       this._players.push(new Player(nameO));
//     }
//     return [nameX, nameO];
//   }

//   /*
//    * public function that start the game
//    * @param letter [String]: X or O as possible letters
//    * @return result [Object]: if the game is running - send the next turn; if is finished - send the winner
//    */
//   registerMove(position) {
//     if(position < Math.pow(this._grid, 2) && this._board[position] === 'E' ) {
//       this._board[position] = this._turn;
//       this._movesCounter ++;
//       this.alternateTurns();
//       this.isFinished();
//     }
//     return this._result;
//   }

//   /*
//    * public function that reset the game to its initial state
//    */
//   resetGame() {
//     this._board = [];
//     this._movesCounter = 0;
//     this._result = {};
//     this._turn = '';
//   }

//   /*
//    * public function that resets the array of players
//    */
//   resetPlayers() {
//     this._players = [];
//   }

//   /*
//    * public function that start the game
//    * @param letter [String]: X or O as possible letters
//    */
//   setTurn(letter) {
//     this._turn = letter;
//   }

//   /*
//    * public function that start the game
//    * @param players [Array]: playerX and playerO
//    */
//   startGame(players) {
//     console.log('chegou');
//     // this._board = [];
//     // this._grid = 3; // default 3x3 board _grid
//     // this._movesCounter = 0;
//     // this._players = [];
//     // this._result = {status: 'running'}; // stores the result of the game
//     // this._turn = '';

//     // console.log('players');

//     // this.emptyBoard();

//     // this.insertPlayers(players[0], players[1]);

//     // this.setTurn('X');

//     // console.log(players);

//     // return new Promise((resolve, reject) => {
//     //   resolve();
//     // }).then(() => {game: true});
//   }
// }
exports.default =
Game;